---
import '@fontsource/source-code-pro/400.css';
import '@fontsource/source-code-pro/500.css';

import { pathToFileURL, fileURLToPath } from 'url';
import { relative } from 'path';
import fs from 'fs';

import { getAllPaths, getPostBySlug } from '../lib/api';
import comparePages from '@/lib/comparePages';
import Root from '../layouts/Root.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Link from '../components/Link.astro';
import Image from '../components/Image.astro';
import Bibtex from '../components/Bibtex.astro';

import { allPages, getBacklinks, resources } from '../lib/posts.ts';

export async function getStaticPaths() {
  const posts = await allPages;

  return posts.map((post) => {
    const slug = post.frontmatter.slug.slice(1, -1);
    return {
      params: {
        slug: slug === '' ? undefined : slug,
      },
      props: {
        post,
      },
    };
  });
}

const {
  post: { default: Content, frontmatter: data = {}, file },
} = Astro.props;

const backlinks = [...(await getBacklinks(data.slug))].sort(comparePages());

const imgs = (data.images ?? [])
  .map((image) => {
    let url;
    try {
      url = new URL(image);
    } catch {}
    if (!url || url.protocol === 'file:') {
      const path = fileURLToPath(new URL(image, pathToFileURL(file)));
      return resources[path];
    }
  })
  .filter((x) => !!x);

const image = await imgs[0]?.();
---

<Root title={data.title} image={image} description={data.description ?? null}>
  <link
    slot="head"
    rel="alternate"
    type="application/rss+xml"
    title="RSS feed for all posts"
    href="/posts.rss.xml"
  />

  <article>
    <Header
      title={data.title}
      icon={data.icon}
      date={data.date}
      lastModified={data.last_modified}
    />
    {
      data.renderer === 'bib' ? (
        <Bibtex entries={Astro.props.post.entries} />
      ) : (
        <Content
          components={{
            a: Link,
            img: Image,
          }}
        />
      )
    }
    {
      !!backlinks.length && data.no_backlinks === undefined && (
        <>
          <h2>Backlinks</h2>
          <ul>
            {backlinks.map((b) => (
              <li>
                {b.frontmatter.icon}
                <Link href={b.frontmatter.slug}>{b.frontmatter.title}</Link>
              </li>
            ))}
          </ul>
        </>
      )
    }
  </article>
  <Footer />
</Root>
